package edu.ntu.arbor.sbchao.androidlogger.scheme;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import edu.ntu.arbor.sbchao.androidlogger.scheme.ActivityLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACTIVITY_LOG.
*/
public class ActivityLogDao extends AbstractDao<ActivityLog, Long> {

    public static final String TABLENAME = "ACTIVITY_LOG";

    /**
     * Properties of entity ActivityLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property StartTime = new Property(2, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property ActivityName = new Property(4, String.class, "activityName", false, "ACTIVITY_NAME");
        public final static Property Uploaded = new Property(5, boolean.class, "uploaded", false, "UPLOADED");
        public final static Property ActivityComment = new Property(6, String.class, "activityComment", false, "ACTIVITY_COMMENT");
    };


    public ActivityLogDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACTIVITY_LOG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DEVICE_ID' TEXT NOT NULL ," + // 1: deviceId
                "'START_TIME' INTEGER NOT NULL ," + // 2: startTime
                "'END_TIME' INTEGER NOT NULL ," + // 3: endTime
                "'ACTIVITY_NAME' TEXT NOT NULL ," + // 4: activityName
                "'UPLOADED' INTEGER NOT NULL ," + // 5: uploaded
                "'ACTIVITY_COMMENT' TEXT);"); // 6: activityComment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACTIVITY_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActivityLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
        stmt.bindLong(3, entity.getStartTime().getTime());
        stmt.bindLong(4, entity.getEndTime().getTime());
        stmt.bindString(5, entity.getActivityName());
        stmt.bindLong(6, entity.getUploaded() ? 1l: 0l);
 
        String activityComment = entity.getActivityComment();
        if (activityComment != null) {
            stmt.bindString(7, activityComment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ActivityLog readEntity(Cursor cursor, int offset) {
        ActivityLog entity = new ActivityLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // deviceId
            new java.util.Date(cursor.getLong(offset + 2)), // startTime
            new java.util.Date(cursor.getLong(offset + 3)), // endTime
            cursor.getString(offset + 4), // activityName
            cursor.getShort(offset + 5) != 0, // uploaded
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // activityComment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActivityLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getString(offset + 1));
        entity.setStartTime(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setActivityName(cursor.getString(offset + 4));
        entity.setUploaded(cursor.getShort(offset + 5) != 0);
        entity.setActivityComment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ActivityLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ActivityLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
